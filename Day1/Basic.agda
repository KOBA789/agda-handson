-- Agda では一つのファイルが一つのモジュールを表します。また、あるファ
-- イルで定義されているトップレベルのモジュールの名前はファイル名と一
-- 致している必要があります。したがって、ファイルの先頭には以下のよう
-- にファイル名と一致するモジュールを宣言するのが通例です。
module Basic where

-- Agda はそのままではほとんどなにもできません。真偽値やリストなどです
-- ら言語の組み込みの機能ではなく、自分で定義するか、ライブラリを利用
-- する必要があります。

-- § 1. Boolean

-- まずは真偽値を定義してみましょう。真偽値は真(=true)と偽(=false)とい
-- う２つの値を要素にもつデータ型と考えられます。このようなデータ型は
-- 次のように定義することができます。

data 𝔹 : Set where  -- 𝔹 というデータ型を宣言する (𝔹 は \bb で入力)
  true  : 𝔹         -- 1つ目の値は true
  false : 𝔹         -- 2つ目の値は false

-- -- C-c C-l でファイルをロードすることができます。Agda で開発をする際は、
-- -- 定義を書き終わったり証明を書き終わったりしたときなど適当なタイミン
-- -- グでファイルをロードする必要があります。

-- true や false はあくまで抽象的な要素であり、このままでは何の意味も
-- もちません。真偽値なので、否定をとる関数を考えてみましょう。関数は、
-- まず型を宣言し、次に具体的な振る舞いを記述することで定義できます。

neg : 𝔹 → 𝔹        -- 𝔹 を受け取り 𝔹 を返す関数 neg を宣言する (→ は \r や \to などで入力)
neg true  = false  -- neg は true を受け取った場合 false を返す
neg false = true   -- neg は false を受け取った場合 true を返す

-- 値も関数と同じように型と値を分けて定義します。

neg-of-true : 𝔹         -- 𝔹 という型をもつ neg-of-true という値を定義する
neg-of-true = neg true  -- neg-of-true は neg true である

-- C-c C-n と打つと下に Expression: というプロンプトが現れ、そこに項を
-- 入力するとその項の正規形を計算することができます。試しに、C-c C-n
-- と打ったあとに neg-of-true と入力してみましょう。false と出力される
-- はずです。ただし、C-c C-n と入力する前に C-c C-l でファイルをロード
-- するのを忘れないようにしてください。

-- 次に、論理積を求める関数 and を書いてみましょう。

and : 𝔹 → 𝔹 → 𝔹
and b₁ b₂ = {!!}

or : 𝔹 → 𝔹 → 𝔹
or b₁ b₂ = {!!}

xor : 𝔹 → 𝔹 → 𝔹
xor b₁ b₂ = {!!}

imply : 𝔹 → 𝔹 → 𝔹
imply b₁ b₂ = {!!}

-- § 2. Natural number

data ℕ : Set where
  zero : ℕ
  suc  : ℕ → ℕ
